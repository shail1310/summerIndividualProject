/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.EnterpriseAdminRole;

import Business.Enterprise.Enterprise;
import Business.WebMedical;
import Business.Network.Network;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PatientInfoNetworkRequest;
import Business.WorkQueue.PatientInfoNetworkResult;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nikhil
 */
public class OutgoingPatientInfoRequestJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    WebMedical system;
    UserAccount ua;

    public OutgoingPatientInfoRequestJPanel(JPanel userProcessContainer,
            WebMedical system, UserAccount ua) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.ua = ua;
        populateReqTable();
    }

    private void populateReqTable() {
        DefaultTableModel model = (DefaultTableModel) outgoingRequestJTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : ua.getWorkQueue().getWorkRequestList()) {

            if (request instanceof PatientInfoNetworkRequest) {

                PatientInfoNetworkRequest patInfoReq = (PatientInfoNetworkRequest) request;

                Object[] row = new Object[5];
                row[0] = patInfoReq;
                row[1] = patInfoReq.getPatientId();
                row[2] = patInfoReq.getMessage();
                row[3] = patInfoReq.getSender();
                row[4] = patInfoReq.getStatus();

                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        outgoingRequestJTable = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        refreshTestJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(33, 33, 33));
        setForeground(java.awt.Color.white);

        jScrollPane1.setForeground(java.awt.Color.white);

        outgoingRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Patient Id", "Message", "Sender", "Status"
            }
        ));
        jScrollPane1.setViewportView(outgoingRequestJTable);

        backButton.setBackground(new java.awt.Color(255, 167, 51));
        backButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        backButton.setForeground(java.awt.Color.black);
        backButton.setText("Back");
        backButton.setBorder(null);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        processJButton.setBackground(new java.awt.Color(0, 150, 136));
        processJButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        processJButton.setForeground(java.awt.Color.white);
        processJButton.setText("Process");
        processJButton.setBorder(null);
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        delete.setBackground(new java.awt.Color(211, 47, 47));
        delete.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        delete.setForeground(java.awt.Color.black);
        delete.setText("Delete");
        delete.setBorder(null);
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        refreshTestJButton.setBackground(new java.awt.Color(255, 193, 7));
        refreshTestJButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        refreshTestJButton.setForeground(java.awt.Color.black);
        refreshTestJButton.setText("Refresh");
        refreshTestJButton.setBorder(null);
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(processJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(70, 70, 70)
                            .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(refreshTestJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshTestJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

    }//GEN-LAST:event_backButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        int selectedRow = outgoingRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }

        PatientInfoNetworkRequest request = (PatientInfoNetworkRequest) 
                outgoingRequestJTable.getValueAt(selectedRow, 0);

        ArrayList<String> patientMapping = system.findPatientInformation(request.getPatientId());

        boolean resultFound = false;

        if (patientMapping != null) {
            
            for (String mapping : patientMapping) {
                String[] netStateHosp = mapping.split(":");
                String networkName = netStateHosp[0];
                String state = netStateHosp[1];
                String hospilalName = netStateHosp[2];

                Network network = system.getNetwork(networkName);
                Enterprise enterprise;

                if (network != null) {
                    enterprise = network.getEnterpriseDirectory().getEnterprise(state, Enterprise.EnterpriseType.Hospital, hospilalName);
                    if (enterprise != null) {
                        UserAccount enterpriseAdmin = enterprise.getEnterpriseAdmin();

                        if (!ua.getUsername().equals(enterpriseAdmin.getUsername())) {
                            resultFound = true;
                            PatientInfoNetworkResult result = new PatientInfoNetworkResult();
                            
                            result.setPatientId(request.getPatientId());
                            result.setHospitalName(hospilalName);
                            result.setMessage("Patient Information Request");
                            result.setNetwork(networkName);
                            result.setState(state);
                            result.setStatus("Awaiting Resonse");
                            result.setSender(ua);
                            result.setReceiver(enterpriseAdmin);

                            enterpriseAdmin.getWorkQueue().getWorkRequestList().add(result);
                            request.getSender().getWorkQueue().getWorkRequestList().add(result);
                        }

                    }
                }
            }
        }

        if (!resultFound) {
            request.setStatus("No Information on Network");
        } else {
            request.setStatus("Completed");
        }
        JOptionPane.showMessageDialog(null, "Request Processed");
    }//GEN-LAST:event_processJButtonActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int row = outgoingRequestJTable.getSelectedRow();

        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }

        PatientInfoNetworkRequest request = (PatientInfoNetworkRequest) 
                outgoingRequestJTable.getValueAt(row, 0);

        ua.getWorkQueue().getWorkRequestList().remove(request);
        JOptionPane.showMessageDialog(null, "Request Deleted");
    }//GEN-LAST:event_deleteActionPerformed

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed
        populateReqTable();
    }//GEN-LAST:event_refreshTestJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton delete;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable outgoingRequestJTable;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshTestJButton;
    // End of variables declaration//GEN-END:variables
}
