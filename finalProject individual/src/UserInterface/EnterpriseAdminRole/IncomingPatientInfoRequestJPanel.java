/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.EnterpriseAdminRole;

import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PatientInfoNetworkResult;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nikhil
 */
public class IncomingPatientInfoRequestJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    Enterprise enterprise;
    UserAccount ua;
    PatientOrganization patientOrg;
    
    public IncomingPatientInfoRequestJPanel(JPanel userProcContainer, UserAccount ua, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcContainer;
        this.ua = ua;
        this.enterprise = enterprise;
        this.patientOrg = (PatientOrganization)enterprise.getOrganizationDirectory().searchOrganization(Organization.Type.Patient);
        populateIncomingRequestTable();
    }

    private void populateIncomingRequestTable(){
        DefaultTableModel model = (DefaultTableModel) incomingReqTable.getModel();
        
        model.setRowCount(0);
        
        for (WorkRequest result : ua.getWorkQueue().getWorkRequestList()) {
            
            if (result instanceof PatientInfoNetworkResult) {
                
                PatientInfoNetworkResult patInfoRes = (PatientInfoNetworkResult) result;
                
                Object[] row = new Object[4];
                row[0] = patInfoRes;
                row[1] = patInfoRes.getMessage();
                row[2] = patInfoRes.getSender();
                row[3] = patInfoRes.getStatus();
                
                model.addRow(row);
            }
        }  
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        incomingReqTable = new javax.swing.JTable();
        processJButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        refreshTestJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(33, 33, 33));

        incomingReqTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Id", "Message", "Sender", "Status"
            }
        ));
        jScrollPane1.setViewportView(incomingReqTable);

        processJButton.setBackground(new java.awt.Color(0, 150, 136));
        processJButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        processJButton.setForeground(java.awt.Color.white);
        processJButton.setText("Process");
        processJButton.setBorder(null);
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        backButton.setBackground(new java.awt.Color(211, 47, 47));
        backButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        backButton.setForeground(java.awt.Color.black);
        backButton.setText("Back");
        backButton.setBorder(null);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        delete.setBackground(new java.awt.Color(211, 47, 47));
        delete.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        delete.setForeground(java.awt.Color.black);
        delete.setText("Delete");
        delete.setBorder(null);
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        refreshTestJButton.setBackground(new java.awt.Color(255, 167, 51));
        refreshTestJButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        refreshTestJButton.setForeground(java.awt.Color.black);
        refreshTestJButton.setText("Refresh");
        refreshTestJButton.setBorder(null);
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(processJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(72, 72, 72)
                            .addComponent(refreshTestJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(processJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                    .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refreshTestJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = incomingReqTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }

        PatientInfoNetworkResult result = (PatientInfoNetworkResult) incomingReqTable.getValueAt(selectedRow, 0);
        
        for(Patient p:patientOrg.getPatientDir().getPatientDir()){
            if(p.getPatientId().equals(result.getPatientId())){
                result.setPatient(p);
                result.setStatus("Completed");
            }
        }
        JOptionPane.showMessageDialog(null, "Request Processed");
    }//GEN-LAST:event_processJButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int row = incomingReqTable.getSelectedRow();

        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }

        PatientInfoNetworkResult result = (PatientInfoNetworkResult)
        incomingReqTable.getValueAt(row, 0);

        ua.getWorkQueue().getWorkRequestList().remove(result);
        JOptionPane.showMessageDialog(null, "Request Deleted");
    }//GEN-LAST:event_deleteActionPerformed

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed
        populateIncomingRequestTable();
    }//GEN-LAST:event_refreshTestJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton delete;
    private javax.swing.JTable incomingReqTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshTestJButton;
    // End of variables declaration//GEN-END:variables
}
