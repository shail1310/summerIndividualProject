/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.DoctorRole;

import Business.Enterprise.Enterprise;
import Business.UserAccount.UserAccount;
import Business.Util.ProjectUtil;
import Business.WorkQueue.PatientInfoNetworkRequest;
import Business.WorkQueue.PatientInfoNetworkResult;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nikhil
 */
public class ReqPatientInfoOverNetworkJPanel extends javax.swing.JPanel {

    JPanel upc;
    UserAccount ua;
    Enterprise enterprise;
    public ReqPatientInfoOverNetworkJPanel(JPanel upc, UserAccount ua, Enterprise enterprise) {
        initComponents();
        this.upc = upc;
        this.ua = ua;
        this.enterprise = enterprise;
        populatePatientInfoReqTable();
    }

    private void populatePatientInfoReqTable(){
        DefaultTableModel model = (DefaultTableModel) patientInfoReqJTable.getModel();

        model.setRowCount(0);
        for (WorkRequest request : ua.getWorkQueue().getWorkRequestList()) {
            if (request instanceof PatientInfoNetworkRequest) {
                PatientInfoNetworkRequest patientInfoReq = (PatientInfoNetworkRequest) request;

                Object[] row = new Object[5];
                row[0] = patientInfoReq;
                row[1] = patientInfoReq.getPatientId();
                row[2] = patientInfoReq.getMessage();
                row[3] = patientInfoReq.getReceiver();
                row[4] = patientInfoReq.getStatus();
                
                model.addRow(row);
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reqPatientInfoOverNetwork = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientInfoReqJTable = new javax.swing.JTable();
        txtPatientId = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        viewResults = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        viewDetailPatientInfo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(600, 555));

        reqPatientInfoOverNetwork.setBackground(new java.awt.Color(51, 171, 159));
        reqPatientInfoOverNetwork.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        reqPatientInfoOverNetwork.setForeground(java.awt.Color.black);
        reqPatientInfoOverNetwork.setText("Request Patient Information Over Network");
        reqPatientInfoOverNetwork.setBorder(null);
        reqPatientInfoOverNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqPatientInfoOverNetworkActionPerformed(evt);
            }
        });

        jScrollPane1.setForeground(java.awt.Color.white);

        patientInfoReqJTable.setForeground(java.awt.Color.white);
        patientInfoReqJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Patient Id", "Message", "Receiver", "Status"
            }
        ));
        jScrollPane1.setViewportView(patientInfoReqJTable);

        txtPatientId.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtPatientId.setForeground(java.awt.Color.white);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setForeground(java.awt.Color.white);
        jLabel11.setText("Patient Id");

        txtName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtName.setForeground(java.awt.Color.white);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setForeground(java.awt.Color.white);
        jLabel2.setText("Patient Name");

        viewResults.setBackground(new java.awt.Color(255, 193, 7));
        viewResults.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        viewResults.setForeground(java.awt.Color.black);
        viewResults.setText("View Results");
        viewResults.setBorder(null);
        viewResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewResultsActionPerformed(evt);
            }
        });

        jScrollPane2.setForeground(java.awt.Color.white);

        resultsTable.setForeground(java.awt.Color.white);
        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Id", "Network", "State", "Hospital Name", "Status"
            }
        ));
        jScrollPane2.setViewportView(resultsTable);

        viewDetailPatientInfo.setBackground(new java.awt.Color(51, 171, 159));
        viewDetailPatientInfo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        viewDetailPatientInfo.setForeground(java.awt.Color.black);
        viewDetailPatientInfo.setText("View Detail Patient Information");
        viewDetailPatientInfo.setBorder(null);
        viewDetailPatientInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailPatientInfoActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setText("Patient information found in following hospitals over network");

        refreshButton.setBackground(new java.awt.Color(51, 171, 159));
        refreshButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        refreshButton.setForeground(java.awt.Color.black);
        refreshButton.setText("Refresh");
        refreshButton.setBorder(null);
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        delete.setBackground(new java.awt.Color(244, 67, 54));
        delete.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        delete.setForeground(java.awt.Color.black);
        delete.setText("Delete");
        delete.setBorder(null);
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(244, 67, 54));
        deleteButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        deleteButton.setForeground(java.awt.Color.black);
        deleteButton.setText("Delete");
        deleteButton.setBorder(null);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        backButton.setBackground(new java.awt.Color(255, 193, 7));
        backButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        backButton.setForeground(java.awt.Color.black);
        backButton.setText("Back");
        backButton.setBorder(null);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(viewDetailPatientInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(viewResults, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(71, 71, 71)
                                    .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(reqPatientInfoOverNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(reqPatientInfoOverNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewResults, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewDetailPatientInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reqPatientInfoOverNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqPatientInfoOverNetworkActionPerformed
        String patientName = txtName.getText();
        String patientId = txtPatientId.getText();
        
        if(ProjectUtil.isFeildEmpty(patientName)
                || ProjectUtil.isFeildEmpty(patientId)){
            JOptionPane.showMessageDialog(null, "Enter patient Name and ID");
            return;
        }
        
        PatientInfoNetworkRequest patientInfoRequest = new PatientInfoNetworkRequest();
        
        patientInfoRequest.setPatientName(patientName);
        patientInfoRequest.setPatientId(patientId);
        patientInfoRequest.setMessage("Patient Information Request Over Network");
        patientInfoRequest.setReceiver(enterprise.getEnterpriseAdmin());
        patientInfoRequest.setSender(ua);
        patientInfoRequest.setStatus("Sent");
        
        ua.getWorkQueue().getWorkRequestList().add(patientInfoRequest);
        enterprise.getEnterpriseAdmin().getWorkQueue().getWorkRequestList().add(patientInfoRequest);
        
        JOptionPane.showMessageDialog(null, "Patient Information requested");
    }//GEN-LAST:event_reqPatientInfoOverNetworkActionPerformed

    private void viewResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewResultsActionPerformed
        int row = patientInfoReqJTable.getSelectedRow();

        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        
        String reqStatus = (String)patientInfoReqJTable.getValueAt(row, 4);
        
        if("No Information on Network".equals(reqStatus)){
            JOptionPane.showMessageDialog(null, "No results found on network");
            return;
        }
        
        if(!"Completed".equals(reqStatus)){
            JOptionPane.showMessageDialog(null, "Result are not available yet !!");
            return;
        }

        PatientInfoNetworkRequest patientInfoRequest = (PatientInfoNetworkRequest) 
                patientInfoReqJTable.getValueAt(row, 0);
        
        DefaultTableModel model = (DefaultTableModel) resultsTable.getModel();
        model.setRowCount(0);
        
        for(WorkRequest wr: ua.getWorkQueue().getWorkRequestList()){
            if(wr instanceof PatientInfoNetworkResult){
                PatientInfoNetworkResult patientInfoRes = (PatientInfoNetworkResult) wr;
                
                if(patientInfoRes.getPatientId().equals(patientInfoRequest.getPatientId())){
                    
                    Object[] resultRow = new Object[5];
                    resultRow[0] = patientInfoRes;
                    resultRow[1] = patientInfoRes.getNetwork();
                    resultRow[2] = patientInfoRes.getState();
                    resultRow[3] = patientInfoRes.getHospitalName();
                    resultRow[4] = patientInfoRes.getStatus();
                
                    model.addRow(resultRow);
                }
            }
        }
        
    }//GEN-LAST:event_viewResultsActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        populatePatientInfoReqTable();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void viewDetailPatientInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailPatientInfoActionPerformed
        int row = resultsTable.getSelectedRow();

        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to view patient details");
            return;
        }
        
        String reqStatus = (String)resultsTable.getValueAt(row, 4);
        if(!"Completed".equals(reqStatus)){
            JOptionPane.showMessageDialog(null, "Result are not out yet !!");
            return;
        }
        
        PatientInfoNetworkResult result = (PatientInfoNetworkResult)resultsTable.getValueAt(row, 0);
        
        CardLayout layout = (CardLayout) upc.getLayout();
        upc.add("ViewPatientInformationJPanel", new ViewDetailPatientInfoJPanel(upc, ua,result.getPatient()));
        layout.next(upc);
    }//GEN-LAST:event_viewDetailPatientInfoActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int row = patientInfoReqJTable.getSelectedRow();

        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to delete");
            return;
        }

        PatientInfoNetworkRequest patientInfoReq = (PatientInfoNetworkRequest)
                patientInfoReqJTable.getValueAt(row, 0);

        ua.getWorkQueue().getWorkRequestList().remove(patientInfoReq);
        JOptionPane.showMessageDialog(null, "Request successfully Deleted");
    }//GEN-LAST:event_deleteActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int row = resultsTable.getSelectedRow();

        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }

        PatientInfoNetworkResult patientInfoRes = (PatientInfoNetworkResult)
                resultsTable.getValueAt(row, 0);

        ua.getWorkQueue().getWorkRequestList().remove(patientInfoRes);
        JOptionPane.showMessageDialog(null, "Request Deleted");
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        upc.remove(this);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.previous(upc);
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton delete;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable patientInfoReqJTable;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton reqPatientInfoOverNetwork;
    private javax.swing.JTable resultsTable;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPatientId;
    private javax.swing.JButton viewDetailPatientInfo;
    private javax.swing.JButton viewResults;
    // End of variables declaration//GEN-END:variables
}
